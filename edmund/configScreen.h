#ifndef CONFIGSCREEN_INCLUDED
#define CONFIGSCREEN_INCLUDED

#include "hardware.h"
#include "game.h"
#include "screen.h"

// http://javl.github.io/image2cpp/

const unsigned char mainlayout[] PROGMEM = {
  // 'layouAtScale_noGrid', 84x48px
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xe6, 0x7e, 0xff, 0x7f, 0xe3,
  0xfe, 0x3f, 0xfb, 0xf5, 0x60, 0x00, 0xd9, 0xba, 0xbe, 0x7f, 0xfb, 0xff, 0xbf, 0xf3, 0xf8, 0xe0,
  0x00, 0xd6, 0xb8, 0x3f, 0x7f, 0xe3, 0xff, 0x3f, 0xeb, 0xe2, 0x20, 0x00, 0xd0, 0xbc, 0x7f, 0x7f,
  0xef, 0xff, 0xbf, 0xe3, 0xf2, 0x60, 0x00, 0xe9, 0x7e, 0xfe, 0x3f, 0xe3, 0xfe, 0x3f, 0xfb, 0xf8,
  0xe0, 0x00, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x60, 0x00, 0xf9, 0xff, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xe0, 0x00, 0xff, 0xff, 0xe0, 0x02, 0x00, 0x20, 0x02, 0x00,
  0x3f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x02, 0x00, 0x20, 0x02, 0x00, 0x3c, 0x60, 0x00, 0x00, 0x0e,
  0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x38, 0xe0, 0x00, 0x00, 0x0c, 0xe2, 0xa2, 0x00, 0x20, 0x02,
  0x00, 0x30, 0x60, 0x00, 0x00, 0x0e, 0xe3, 0xe2, 0x00, 0x20, 0x02, 0x00, 0x30, 0x20, 0x00, 0x00,
  0x0e, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x31, 0x20, 0x00, 0x00, 0x0c, 0x60, 0x82, 0x00, 0x20,
  0x02, 0x00, 0x38, 0x60, 0x00, 0x00, 0x0f, 0xe0, 0x02, 0x00, 0x20, 0x02, 0x00, 0x3f, 0xe0, 0x00,
  0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x02, 0x00,
  0x20, 0x02, 0x00, 0x3c, 0xe0, 0x00, 0x00, 0x0c, 0x60, 0x02, 0x08, 0x20, 0x02, 0x00, 0x3f, 0x60,
  0x00, 0x00, 0x0f, 0x60, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x29, 0x20, 0x00, 0x00, 0x0c, 0x60, 0x02,
  0x3e, 0x20, 0x02, 0x00, 0x33, 0x20, 0x00, 0x00, 0x0d, 0xe0, 0x02, 0x1c, 0x20, 0x02, 0x00, 0x24,
  0x60, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x08, 0x00, 0x00, 0x00, 0x30, 0xe0, 0x00, 0x00, 0x0f, 0xe0,
  0x02, 0x00, 0x20, 0x02, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x02, 0x00, 0x20, 0x02, 0x00,
  0x3f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x0c,
  0x60, 0x02, 0x00, 0x20, 0x82, 0x00, 0x30, 0x60, 0x00, 0x00, 0x0f, 0x60, 0x02, 0x00, 0x22, 0xa2,
  0x00, 0x2d, 0xa0, 0x00, 0x00, 0x0e, 0x60, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x20, 0x20, 0x00, 0x00,
  0x0f, 0x60, 0x02, 0x00, 0x21, 0xc2, 0x00, 0x22, 0x20, 0x00, 0x00, 0x0c, 0x60, 0x02, 0x00, 0x20,
  0x82, 0x00, 0x30, 0x60, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x60, 0x00,
  0x00, 0x0f, 0xe0, 0x02, 0x00, 0x20, 0x02, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x02, 0x00,
  0x20, 0x02, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x0f, 0x60, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0x60,
  0x00, 0x00, 0x0e, 0x60, 0x02, 0x00, 0x20, 0x02, 0x2a, 0x20, 0x20, 0x00, 0x00, 0x0d, 0x60, 0x02,
  0x00, 0x20, 0x02, 0x3e, 0x20, 0x20, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x2d,
  0xa0, 0x00, 0x00, 0x0f, 0x60, 0x02, 0x00, 0x20, 0x02, 0x08, 0x3d, 0xe0, 0x00, 0x00, 0x0f, 0xe0,
  0x02, 0x00, 0x20, 0x02, 0x00, 0x38, 0xe0, 0x00, 0xff, 0xfe, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3f, 0xe0, 0x00, 0xff, 0xfc, 0x60, 0x02, 0x00, 0x20, 0x02, 0x00, 0x3f, 0xe0, 0x00, 0xff, 0xfa,
  0xa0, 0x02, 0x00, 0x20, 0x02, 0x00, 0x3d, 0xe0, 0x00, 0xff, 0xfa, 0xa0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3a, 0xe0, 0x00, 0xff, 0xfa, 0xa0, 0x02, 0x00, 0x20, 0x02, 0x00, 0x37, 0x60, 0x00, 0xff,
  0xfc, 0x60, 0x02, 0x00, 0x20, 0x02, 0x00, 0x3a, 0xe0, 0x00, 0xff, 0xfe, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3d, 0xe0, 0x00, 0xff, 0xff, 0xe0, 0x02, 0x00, 0x20, 0x02, 0x00, 0x3f, 0xe0, 0x00
};

// 'numeric_1', 4x5px
const unsigned char numeric1[] PROGMEM = {
  0x20, 0x60, 0x20, 0x20, 0x70
};
// 'numeric_2', 4x5px
const unsigned char numeric2[] PROGMEM = {
  0x70, 0x10, 0x70, 0x40, 0x70
};
// 'numeric_3', 4x5px
const unsigned char numeric3[] PROGMEM = {
  0x70, 0x10, 0x30, 0x10, 0x70
};
// 'numeric_4', 4x5px
const unsigned char numeric4[] PROGMEM = {
  0x10, 0x30, 0x50, 0x70, 0x10
};
// 'numeric_5', 4x5px
const unsigned char numeric5[] PROGMEM = {
  0x70, 0x40, 0x70, 0x10, 0x70
};
// 'numeric_6', 4x5px
const unsigned char numeric6[] PROGMEM = {
  0x70, 0x40, 0x70, 0x50, 0x70
};
// 'numeric_7', 4x5px
const unsigned char numeric7[] PROGMEM = {
  0x70, 0x10, 0x20, 0x20, 0x20
};
// 'numeric_8', 4x5px
const unsigned char numeric8[] PROGMEM = {
  0x70, 0x50, 0x70, 0x50, 0x70
};
// 'numeric_9', 4x5px
const unsigned char numeric9[] PROGMEM = {
  0x70, 0x50, 0x70, 0x10, 0x10
};
// 'numeric_0', 4x5px
const unsigned char numeric0[] PROGMEM = {
  0x20, 0x50, 0x50, 0x50, 0x20
};



class ConfigScreen : public IScreen
{
  private:
    int debug = -1; 
    int col_size = 6;
    int row_size = 8;
    int row_margin = 2;
    int small_gap = 3;
    int big_gap = 4;
    
    
  public: 
    ConfigScreen(){
      
    }
    virtual ScreenEnum loop(Hardware& hardware, Game& game)
    {
      int current_row;
      int current_col;
			hardware.DrawScreen(mainlayout);

			for(int r = 0; r < 5; r ++)
			for (int i = 0; i < 5; i++) 
      {

        current_row = (r * row_size) + row_size + row_margin;
        current_col = (i * (col_size * 2)) + col_size + (col_size * 2);
        if (i == r) {

        }
        else if (i == 2 && r == 1) {
            hardware.lcd.fillRect(current_col, current_row - 1, (col_size * 2) + 1, (row_size - 1), BLACK);

            current_col += 2;
            hardware.DrawNumericWhite(current_col, current_row, numeric2);
            hardware.DrawNumericWhite(current_col + big_gap, current_row, numeric9);
          
        }
        else if (i < 4)
        {
          current_col += 2;
          hardware.DrawNumeric(current_col, current_row, numeric2);
          hardware.DrawNumeric(current_col + big_gap, current_row, numeric9);
        }
        else {

          hardware.DrawNumeric(0, current_row, numeric1);
          hardware.DrawNumeric(0 + small_gap, current_row, numeric4);
          hardware.DrawNumeric(0 + small_gap + big_gap, current_row, numeric5);
        }

			}

      if (hardware.IsDebugPressed() == 1)

      
      if(hardware.IsMiddlePressed() == 1)
        return BootScreenEnum;
      return ConfigScreenEnum;
    } 
};

#endif
